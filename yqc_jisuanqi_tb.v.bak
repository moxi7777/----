`timescale 1ns / 1ps

// 定义测试模块，名称可以自定义，这里取名为calculator_tb
module yqc_jisuanqi_tb;

    // 声明需要连接到被测试模块（即计算器模块）的信号，按照顶层模块的端口定义来声明
    reg clk;
    reg rst;
    reg [3:0] key;
    reg [7:0] data_in;
    wire [7:0] data_out;
    wire [3:0] seg;
    wire [3:0] dig;

    // 实例化被测试的计算器模块（顶层模块）
    yqc_jisuanqi u_yqc_jisuanqi (
      .clk(clk),
      .rst(rst),
      .key(key),
      .data_in(data_in),
      .data_out(data_out),
      .seg(seg),
      .dig(dig)
    );

    // 生成时钟信号，这里设置时钟周期为10ns，可根据实际需求调整
    always #5 clk = ~clk;

    // 初始化测试过程
    initial begin
        // 初始化信号值
        clk = 0;
        rst = 1;
        key = 0;
        data_in = 0;

        // 复位信号保持一段时间，模拟复位操作
        #100;
        rst = 0;

        // 输入第一个操作数，这里示例输入8'd5（十进制的5）
        data_in = 8'd5;
        key = 4'b0000;
        #100;

        // 设置加法运算
        key = 4'b0010;
        #100;

        // 输入第二个操作数，示例输入8'd3（十进制的3）
        data_in = 8'd3;
        key = 4'b0001;
        #100;

        // 按下等于按键（这里假设可以通过某个特定的key值表示，此处省略具体对应关系设置，仅示例流程），查看加法运算结果
        key = 4'bxxxx;  // 替换为实际对应的等于按键编码
        #100;

        // 测试减法运算，先重置相关输入
        data_in = 0;
        key = 0;
        #100;

        // 输入第一个操作数，示例输入8'd8（十进制的8）
        data_in = 8'd8;
        key = 4'b0000;
        #100;

        // 设置减法运算
        key = 4'b0011;
        #100;

        // 输入第二个操作数，示例输入8'd4（十进制的4）
        data_in = 8'd4;
        key = 4'b0001;
        #100;

        // 按下等于按键，查看减法运算结果
        key = 4'bxxxx;
        #100;

        // 测试乘法运算，重置输入
        data_in = 0;
        key = 0;
        #100;

        // 输入第一个操作数，示例输入8'd3（十进制的3）
        data_in = 8'd3;
        key = 4'b0000;
        #100;

        // 设置乘法运算
        key = 4'b0100;
        #100;

        // 输入第二个操作数，示例输入8'd5（十进制的5）
        data_in = 8'd5;
        key = 4'b0001;
        #100;

        // 按下等于按键，查看乘法运算结果
        key = 4'bxxxx;
        #100;

        // 测试除法运算，重置输入
        data_in = 0;
        key = 0;
        #100;

        // 输入第一个操作数，示例输入8'd10（十进制的10）
        data_in = 8'd10;
        key = 4'b0000;
        #100;

        // 设置除法运算
        key = 4'b0101;
        #100;

        // 输入第二个操作数，示例输入8'd2（十进制的2）
        data_in = 8'd2;
        key = 4'b0001;
        #100;

        // 按下等于按键，查看除法运算结果
        key = 4'bxxxx;
        #100;

        // 测试清零功能
        key = 4'b1000;
        #100;

        // 可以添加更多的测试用例，比如边界值测试、不同顺序的操作数输入等，此处仅为基础示例

        $finish;  // 结束仿真
    end

endmodule