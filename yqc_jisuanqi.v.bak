module yqc_jisuanqi(  
    input clk,         // 时钟信号  
    input clks,       // 显示时钟信号  
    input rst,        // 复位信号  
    input clear,      // 清零信号  
    input equal,      // 等于信号  
    input [3:0] key,  // 按键输入运算符  
    input [9:0] sw,   // 按键输入数值  
    output reg [3:0] dig,   // 位选信号  
    output reg [6:0] seg,   // 段选信号  
    output reg [15:0] show   // 数码管显示数值  
);  

    // 状态定义  
    typedef enum reg [1:0] {  
        IDLE,    // 空闲状态  
        INPUT1,  // 输入第一个操作数  
        OPERATOR,// 输入运算符  
        INPUT2,  // 输入第二个操作数  
        RESULT   // 显示结果  
    } state_t;  

    state_t current_state, next_state;  

    // 存储操作数和运算结果  
    reg [15:0] num1, num2, result;  
    reg [3:0] operation; // 运算符  

    // 计算操作  
    always @(posedge clk or posedge rst) begin  
        if (rst) begin  
            current_state <= IDLE;  
            num1 <= 0;  
            num2 <= 0;  
            result <= 0;  
            show <= 0;  
            dig <= 4'b1110; // 默认显示第一个数码管  
        end else begin  
            current_state <= next_state;  
        end  
    end  

    // 状态转移逻辑  
    always @(*) begin  
        case (current_state)  
            IDLE: begin  
                if (clear) begin  
                    next_state = IDLE; // 清零，保持在空闲状态  
                    num1 = 0;  
                    num2 = 0;  
                    result = 0;  
                    show = 0;  
                end else if (sw != 0) begin  
                    next_state = INPUT1; // 开始输入第一个操作数  
                    num1 = sw; // 读取输入值  
                end else begin  
                    next_state = IDLE;  
                end  
            end  

            INPUT1: begin  
                if (key != 0) begin  
                    operation = key; // 保存运算符  
                    next_state = OPERATOR; // 转到运算符输入状态  
                end else begin  
                    next_state = INPUT1; // 继续输入第一个操作数  
                end  
            end  

            OPERATOR: begin  
                if (sw != 0) begin  
                    next_state = INPUT2; // 输入第二个操作数  
                    num2 = sw; // 读取输入值  
                end else begin  
                    next_state = OPERATOR; // 等待输入运算符  
                end  
            end  

            INPUT2: begin  
                if (equal) begin  
                    // 根据运算符计算结果  
                    case (operation)  
                        4'b0001: result = num1 + num2; // 加法  
                        4'b0010: result = num1 - num2; // 减法  
                        4'b0011: result = num1 * num2; // 乘法  
                        4'b0100: if (num2 != 0) result = num1 / num2; // 除法  
                        default: result = 0; // 默认结果  
                    endcase  
                    show = result; // 显示结果  
                    next_state = RESULT; // 转到结果状态  
                end else begin  
                    next_state = INPUT2; // 继续输入第二个操作数  
                end  
            end  

            RESULT: begin  
                if (clear) begin  
                    next_state = IDLE; // 清零，返回空闲状态  
                end else begin  
                    next_state = RESULT; // 保持在结果状态  
                end  
            end  

            default: next_state = IDLE; // 默认状态  
        endcase  
    end  

    // 显示逻辑  
    always @(posedge clks) begin  
        // 将结果分解为个位、十位、百位、千位  
        dig = show[15:12]; // 位选信号  
        case (dig)  
            4'b0000: seg = 7'b0000001; // 0  
            4'b0001: seg = 7'b1001111; // 1  
            4'b0010: seg = 7'b0010010; // 2  
            4'b0011: seg = 7'b0000110; // 3  
            4'b0100: seg = 7'b1001100; // 4  
            4'b0101: seg = 7'b0100100; // 5  
            4'b0110: seg = 7'b0100000; // 6  
            4'b0111: seg = 7'b0001111; // 7  
            4'b1000: seg = 7'b0000000; // 8  
            4'b1001: seg = 7'b0000100; // 9  
            default: seg = 7'b1111111; // OFF  
        endcase  
    end  

endmodule