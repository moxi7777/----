$date
	Wed Dec 25 20:23:29 2024
$end
$version
	ModelSim Version 10.4
$end
$timescale
	1ps
$end

$scope module tb_yqc_jisuanqi $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 4 # key [3:0] $end
$var reg 8 $ data_in [7:0] $end
$var wire 1 % data_out [7] $end
$var wire 1 & data_out [6] $end
$var wire 1 ' data_out [5] $end
$var wire 1 ( data_out [4] $end
$var wire 1 ) data_out [3] $end
$var wire 1 * data_out [2] $end
$var wire 1 + data_out [1] $end
$var wire 1 , data_out [0] $end
$var wire 1 - seg [3] $end
$var wire 1 . seg [2] $end
$var wire 1 / seg [1] $end
$var wire 1 0 seg [0] $end
$var wire 1 1 dig [3] $end
$var wire 1 2 dig [2] $end
$var wire 1 3 dig [1] $end
$var wire 1 4 dig [0] $end

$scope module uut $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 7 key [3] $end
$var wire 1 8 key [2] $end
$var wire 1 9 key [1] $end
$var wire 1 : key [0] $end
$var wire 1 ; data_in [7] $end
$var wire 1 < data_in [6] $end
$var wire 1 = data_in [5] $end
$var wire 1 > data_in [4] $end
$var wire 1 ? data_in [3] $end
$var wire 1 @ data_in [2] $end
$var wire 1 A data_in [1] $end
$var wire 1 B data_in [0] $end
$var wire 1 % data_out [7] $end
$var wire 1 & data_out [6] $end
$var wire 1 ' data_out [5] $end
$var wire 1 ( data_out [4] $end
$var wire 1 ) data_out [3] $end
$var wire 1 * data_out [2] $end
$var wire 1 + data_out [1] $end
$var wire 1 , data_out [0] $end
$var wire 1 - seg [3] $end
$var wire 1 . seg [2] $end
$var wire 1 / seg [1] $end
$var wire 1 0 seg [0] $end
$var wire 1 1 dig [3] $end
$var wire 1 2 dig [2] $end
$var wire 1 3 dig [1] $end
$var wire 1 4 dig [0] $end
$var wire 1 C result [15] $end
$var wire 1 D result [14] $end
$var wire 1 E result [13] $end
$var wire 1 F result [12] $end
$var wire 1 G result [11] $end
$var wire 1 H result [10] $end
$var wire 1 I result [9] $end
$var wire 1 J result [8] $end
$var wire 1 K result [7] $end
$var wire 1 L result [6] $end
$var wire 1 M result [5] $end
$var wire 1 N result [4] $end
$var wire 1 O result [3] $end
$var wire 1 P result [2] $end
$var wire 1 Q result [1] $end
$var wire 1 R result [0] $end
$var wire 1 S overflow $end
$var wire 1 T div_error $end

$scope module u_operation_control $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 7 key [3] $end
$var wire 1 8 key [2] $end
$var wire 1 9 key [1] $end
$var wire 1 : key [0] $end
$var wire 1 ; data_in [7] $end
$var wire 1 < data_in [6] $end
$var wire 1 = data_in [5] $end
$var wire 1 > data_in [4] $end
$var wire 1 ? data_in [3] $end
$var wire 1 @ data_in [2] $end
$var wire 1 A data_in [1] $end
$var wire 1 B data_in [0] $end
$var reg 16 U result [15:0] $end
$var reg 1 V overflow $end
$var reg 1 W div_error $end
$var reg 16 X num1 [15:0] $end
$var reg 16 Y num2 [15:0] $end
$var reg 3 Z operation [2:0] $end
$upscope $end

$scope module u_display_control $end
$var wire 1 5 clk $end
$var wire 1 6 rst $end
$var wire 1 C data_in [15] $end
$var wire 1 D data_in [14] $end
$var wire 1 E data_in [13] $end
$var wire 1 F data_in [12] $end
$var wire 1 G data_in [11] $end
$var wire 1 H data_in [10] $end
$var wire 1 I data_in [9] $end
$var wire 1 J data_in [8] $end
$var wire 1 K data_in [7] $end
$var wire 1 L data_in [6] $end
$var wire 1 M data_in [5] $end
$var wire 1 N data_in [4] $end
$var wire 1 O data_in [3] $end
$var wire 1 P data_in [2] $end
$var wire 1 Q data_in [1] $end
$var wire 1 R data_in [0] $end
$var wire 1 S overflow $end
$var reg 8 [ data_out [7:0] $end
$var reg 4 \ seg [3:0] $end
$var reg 4 ] dig [3:0] $end
$var reg 4 ^ display_digit [3:0] $end
$var reg 2 _ scan_count [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b0 #
b0 $
b0 U
0V
0W
b0 X
b0 Y
b0 Z
b0 [
b0 \
b0 ]
b0 ^
b0 _
0,
0+
0*
0)
0(
0'
0&
0%
00
0/
0.
0-
04
03
02
01
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0S
0T
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
16
05
$end
